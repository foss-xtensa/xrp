//  Memory map file to generate linker scripts for programs without board I/O.

// $Id: //depot/rel/Eaglenest/Xtensa/SWConfig/ldscripts/min-rt.parm#2 $

// Customer ID=11189; Build=0x591e5; Copyright (c) 2004-2014 by Tensilica Inc.  ALL RIGHTS RESERVED.
// These coded instructions, statements, and computer programs are the
// copyrighted works and confidential proprietary information of Tensilica Inc.
// They may not be modified, copied, reproduced, distributed, or disclosed to
// third parties in any manner, medium, or form, in whole or in part, without
// the prior written consent of Tensilica Inc.


ROMING=true

// A memory map is a sequence of memory descriptions and
// optional parameter assignments.
//
// Each memory description has the following format:
//   BEGIN <name>
//     <addr> [,<paddr>] : <mem-type> : <mem-name> : <size> [,<psize>]
//                       : [writable] [,executable] [,device] ;
//     <segment>*
//   END <name>
//
// where each <segment> description has the following format:
//     <seg-name> : F|C : <start-addr> - <end-addr> [ : STACK ] [ : HEAP ]
//                : <section-name>* ;
//
// Each parameter assignment is a keyword/value pair in the following format:
//   <keyword> = <value>                (no spaces in <value>)
// or
//   <keyword> = "<value>"              (spaces allowed in <value>)
//
// The following primitives are also defined:
//   PLACE SECTIONS( <section-name>* ) { WITH_SECTION(<section-name>)
//                                       | IN_SEGMENT(<seg-name>) }
//
//   NOLOAD <section-name1> [ <section-name2> ... ]
//
// Please refer to the Xtensa LSP Reference Manual for more details.
//
BEGIN dram0
0x10000: dataRam : dram0 : 0x10000 : writable ;
 dram0_0 : C : 0x10000 - 0x1ffff : .dram0.rodata .dram0.literal .dram0.data .dram0.bss;
END dram0

BEGIN dram1
0x30000: dataRam : dram1 : 0x10000 : writable ;
 dram1_0 : C : 0x30000 - 0x3ffff : .dram1.rodata .dram1.literal .ResetVector.literal .dram1.data .dram1.bss;
END dram1

BEGIN iram0
0x40000: instRam : iram0 : 0x2000 : executable, writable ;
 iram0_0 : F : 0x40000 - 0x402ff : .ResetVector.text;
 iram0_1 : C : 0x40300 - 0x403ff : ;
 iram0_2 : F : 0x40400 - 0x40577 : .WindowVectors.text;
 iram0_3 : C : 0x40578 - 0x4057f : .Level2InterruptVector.literal;
 iram0_4 : F : 0x40580 - 0x405b7 : .Level2InterruptVector.text;
 iram0_5 : C : 0x405b8 - 0x405bf : .DebugExceptionVector.literal;
 iram0_6 : F : 0x405c0 - 0x405f7 : .DebugExceptionVector.text;
 iram0_7 : C : 0x405f8 - 0x405ff : .NMIExceptionVector.literal;
 iram0_8 : F : 0x40600 - 0x40637 : .NMIExceptionVector.text;
 iram0_9 : C : 0x40638 - 0x4063f : .KernelExceptionVector.literal;
 iram0_10 : F : 0x40640 - 0x40677 : .KernelExceptionVector.text;
 iram0_11 : C : 0x40678 - 0x4067f : .UserExceptionVector.literal;
 iram0_12 : F : 0x40680 - 0x406b7 : .UserExceptionVector.text;
 iram0_13 : C : 0x406b8 - 0x406ff : .DoubleExceptionVector.literal;
 iram0_14 : F : 0x40700 - 0x4073f : .DoubleExceptionVector.text;
 iram0_15 : C : 0x40740 - 0x41fff : .iram0.literal .iram0.text;
END iram0

BEGIN srom
0x100000: sysrom : srom : 0x100000 : executable ;
 srom0 : C : 0x100000 - 0x1fffff : .srom.rodata .srom.literal .srom.text .rom.store;
END srom

BEGIN sram
0x200000: sysram : sram : 0x20000000 : executable, writable ;
 sram0 : C : 0x200000 - 0x201fffff :  STACK :  HEAP : .sram.rodata .rodata .sram.literal .literal .sram.text .text .sram.data .data .sram.bss .bss;
END sram

