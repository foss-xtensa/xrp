//  Memory map file to generate linker scripts for programs run on the ISS.

// Customer ID=256; Build=0x63880; Copyright (c) 2004-2015 Cadence Design Systems, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


// A memory map is a sequence of memory descriptions and
// optional parameter assignments.
//
// Each memory description has the following format:
//   BEGIN <name>
//     <addr> [,<paddr>] : <mem-type> : <mem-name> : <size> [,<psize>]
//                       : [writable] [,executable] [,device] ;
//     <segment>*
//   END <name>
//
// where each <segment> description has the following format:
//     <seg-name> : F|C : <start-addr> - <end-addr> [ : STACK ] [ : HEAP ]
//                : <section-name>* ;
//
// Each parameter assignment is a keyword/value pair in the following format:
//   <keyword> = <value>                (no spaces in <value>)
// or
//   <keyword> = "<value>"              (spaces allowed in <value>)
//
// The following primitives are also defined:
//   PLACE SECTIONS( <section-name>* ) { WITH_SECTION(<section-name>)
//                                       | IN_SEGMENT(<seg-name>) }
//
//   NOLOAD <section-name1> [ <section-name2> ... ]
//
// Please refer to the Xtensa LSP Reference Manual for more details.
//

// Additions for -mvecbase option:
VECBASE = 0x61000000


// Additions for -mvecselect option:
VECSELECT = 0


// Additions for -syscore option:
SYSCORE = P6_1


// Additions for -reset-table-vaddr option:
RESET_TABLE_VADDR = 0x50600000

BEGIN sysram_l
0x4: sysram : sysram_l : 0xffffffc : executable, shared, writable ;
 sysram_l0 : C : 0x4 - 0xfffffff : ;
END sysram_l

BEGIN dram1
0x3ffc0000: dataRam : dram1 : 0x20000 : writable ;
 dram1_0 : C : 0x3ffc0000 - 0x3ffdffff : .dram1.rodata .dram1.literal .dram1.data .dram1.bss;
END dram1

BEGIN dram0
0x3ffe0000: dataRam : dram0 : 0x20000 : writable ;
 dram0_0 : C : 0x3ffe0000 - 0x3fffbfff : .dram0.rodata .dram0.literal .dram0.data .dram0.bss;
 dram0_1_stack : C : 0x3fffc000 - 0x3fffffff :  STACK : ;
END dram0

BEGIN sysrom_B
0x50000000: sysrom : sysrom_B : 0x300 : executable ;
 sysrom_B0 : F : 0x50000000 - 0x500002ff : .SharedResetVector.text;
END sysrom_B

BEGIN sysrom_C
0x50000300: sysrom : sysrom_C : 0x30 : executable, shared ;
 sysrom_C0 : C : 0x50000300 - 0x5000032f : .SharedMemoryExceptionVector.literal;
END sysrom_C

BEGIN sysrom_D
0x50000330: sysrom : sysrom_D : 0x180 : executable ;
 sysrom_D0 : F : 0x50000330 - 0x500004af : .MemoryExceptionVector.text;
END sysrom_D

BEGIN sysrom_E
0x500004b0: sysrom : sysrom_E : 0xb50 : executable, shared ;
 sysrom_E0 : C : 0x500004b0 - 0x50000fff : ;
END sysrom_E

BEGIN sysrom_F
0x50400000: sysrom : sysrom_F : 0x200000 : executable ;
 sysrom_F0 : C : 0x50400000 - 0x505ffcff : .sysrom.rodata .sysrom.literal .sysrom.text .rom.store;
 sysrom_F1 : C : 0x505ffd00 - 0x505fffff : .ResetVector.literal .ResetVector.text;
END sysrom_F

BEGIN sysrom_G
0x50600004: sysrom : sysrom_G : 0x4 : executable ;
 sysrom_G0 : C : 0x50600004 - 0x50600007 : .ResetTable.rodata;
END sysrom_G

BEGIN sysrom
0x50600008: sysrom : sysrom : 0x9ffff8 : executable, shared ;
 sysrom0 : C : 0x50600008 - 0x50ffffff : ;
END sysrom

BEGIN sysram_B
0x61000000: sysram : sysram_B : 0x800000 : executable, writable ;
 sysram_B0 : F : 0x61000000 - 0x61000177 : .WindowVectors.text;
 sysram_B1 : C : 0x61000178 - 0x6100017f : .Level2InterruptVector.literal;
 sysram_B2 : F : 0x61000180 - 0x610001b7 : .Level2InterruptVector.text;
 sysram_B3 : C : 0x610001b8 - 0x610001bf : .DebugExceptionVector.literal;
 sysram_B4 : F : 0x610001c0 - 0x610001f7 : .DebugExceptionVector.text;
 sysram_B5 : C : 0x610001f8 - 0x610001ff : .NMIExceptionVector.literal;
 sysram_B6 : F : 0x61000200 - 0x61000237 : .NMIExceptionVector.text;
 sysram_B7 : C : 0x61000238 - 0x6100023f : .KernelExceptionVector.literal;
 sysram_B8 : F : 0x61000240 - 0x61000277 : .KernelExceptionVector.text;
 sysram_B9 : C : 0x61000278 - 0x6100027f : .UserExceptionVector.literal;
 sysram_B10 : F : 0x61000280 - 0x610002b7 : .UserExceptionVector.text;
 sysram_B11 : C : 0x610002b8 - 0x610002ff : .DoubleExceptionVector.literal;
 sysram_B12 : F : 0x61000300 - 0x6100033f : .DoubleExceptionVector.text;
 sysram_B13 : C : 0x61000340 - 0x617fffff :  HEAP : .sysram.rodata .rodata .sysram.literal .literal .SharedResetVector.literal .sysram.text .text .sysram.data .data .sysram.bss .bss;
END sysram_B

BEGIN sysram
0x61800000: sysram : sysram : 0x2800000 : executable, shared, writable ;
 sysram0 : C : 0x61800000 - 0x63ffffff : ;
END sysram

BEGIN sharedram_l
0xf0000000: sysram : sharedram_l : 0xd000000 : executable, shared, writable ;
 sharedram_l0 : C : 0xf0000000 - 0xfcffffff : ;
END sharedram_l

BEGIN mmio
0xfd000000: sysram : mmio : 0x1000000 : executable, shared, writable ;
 mmio0 : C : 0xfd000000 - 0xfdffffff : ;
END mmio

